@page "/management"
@using SwimRankings.Api.Helpers
@using SwimRankings.Api.Models
@using SwimrankingsComparer.Application.Services
@inject SwimmerService Service

<PageTitle>@Constants.AppName - Gegevensbeheer</PageTitle>

<h2>Zwemmersoverzicht</h2>
<div class="row mb-3">
    @if (_swimmerData == null)
    {
        @:Bezig met laden...
    }
    else if (!_swimmerData.Any())
    {
        @:Er staan nog geen zwemmers in het systeem.
    }
    else
    {
        <table class="table table-bordered table-striped">
            @foreach (var swimmer in _swimmerData)
            {
                <tr>
                    <td>@swimmer.LastName, @swimmer.FirstName <a href="@SwimrankingsUrlHelper.Get(swimmer.Id)" target="_blank"><span class="oi-location">s</span></a></td>
                    <td>@swimmer.LastUpdated.ToString("dd/MM/yyyy hh:mm")</td>
                    <td><button class="btn btn-secondary btn-sm" @onclick="() => UpdateSwimmerAsync(swimmer.Id)">update now</button></td>
                </tr>
            }
        </table>
    }
</div>

<h2>Zwemmer toevoegen</h2>
<div class="row mb-3">
    <div class="col-md-4">
        <div class="row">
            <div class="col-auto"><label class="col-form-label">Swimrankings id:</label></div>
            <div class="col"><input @bind="_swimmerId" class="form-control" /></div>
        </div>
    </div>
</div>

<p><button class="btn btn-primary" @onclick="AddSwimmerAsync">Toevoegen &raquo;</button></p>

@code {
    private IEnumerable<SwimmerData>? _swimmerData;
    private string _swimmerId = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        _swimmerData = await Service.GetAllSwimmerDataAsync();
    }
    
    private async Task AddSwimmerAsync()
    {
        _swimmerData = null;
        await Service.GetSwimmerDataAsync(_swimmerId, true);
        _swimmerData = await Service.GetAllSwimmerDataAsync();
    }
    
    private async Task UpdateSwimmerAsync(string id)
    {
        _swimmerData = null;
        await Service.GetSwimmerDataAsync(id, true);
        _swimmerData = await Service.GetAllSwimmerDataAsync();
    }
}