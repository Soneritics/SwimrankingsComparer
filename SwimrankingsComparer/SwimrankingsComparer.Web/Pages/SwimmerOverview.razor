@page "/overview"
@using SwimRankings.Api.Models
@using SwimrankingsComparer.Application.Extensions
@using SwimrankingsComparer.Application.Services
@inject SwimmerService Service

<PageTitle>@Constants.AppName - Zwemmersoverzicht</PageTitle>

<h1>Overzicht</h1>
<div class="row mb-3">
    @if (_swimmers == null)
    {
        @:Bezig met laden...
    }
    else if (!_swimmers.Any())
    {
        @:Er staan nog geen zwemmers in het systeem.
    }
    else
    {
        <div class="mb-3">
            <p>Slagen</p>
            @foreach (var item in _checkboxItems)
            {
                <div>
                    <input type="checkbox" @bind="item.IsChecked" name="stroke-@item.Stroke-@item.Distance" id="stroke-@item.Stroke-@item.Distance" />
                    <label for="stroke-@item.Stroke-@item.Distance" class="form-label">@item.Distance @item.Stroke.ToDutch()</label>
                </div>
            }
        </div>
    
        <table class="table table-bordered table-striped">
            <thead>
                <tr>
                    <th>Achternaam</th>
                    <th>Voornaam</th>
                    <th>Geboortejaar</th>
                    @foreach (var item in _checkboxItems)
                    {
                        if (item.IsChecked)
                        {
                            <th>@item.Distance @item.Stroke.ToDutch()</th>
                        }
                    }
                </tr>
            </thead>
            <tbody>
            @foreach (var swimmer in _swimmers)
            {
                <tr>
                    <td>@swimmer.LastName</td>
                    <td>@swimmer.FirstName</td>
                    <td>@swimmer.YearOfBirth</td>
                    @foreach (var item in _checkboxItems)
                    {
                        if (item.IsChecked)
                        {
                            var pb = swimmer.Pbs.Where(pb => pb.Stroke == item.Stroke && pb.DistanceInMeters == item.Distance)?.OrderBy(s => s.SwimTime.TimeInMs).FirstOrDefault();
                            <td title="@pb?.SwimTime.DisplayValue - @item.Distance @item.Stroke.ToDutch() - @pb?.Meet?.Date">
                                @pb?.SwimTime.DisplayValue
                            </td>
                        }
                    }
                </tr>
            }
            </tbody>
        </table>
    }
</div>

@code {
    private IEnumerable<SwimmerData>? _swimmers;
    private readonly List<CheckboxItem> _checkboxItems = CheckboxItem.GetCheckboxItems();

    protected override async Task OnInitializedAsync()
    {
        _swimmers = await Service.GetAllSwimmerDataAsync();
    }
    
    private class CheckboxItem
    {
        public Stroke Stroke { get; set; }
        public int Distance { get; set; }
        public bool IsChecked { get; set; }
        
        public static List<CheckboxItem> GetCheckboxItems()
        {
            var strokesAndDistances = new Dictionary<Stroke, int[]>
            {
                { Stroke.Freestyle, [25, 50, 100, 200, 400, 800, 1500, 2000] },
                { Stroke.Breaststroke, [25, 50, 100, 200] },
                { Stroke.Backstroke, [25, 50, 100, 200] },
                { Stroke.Butterfly, [25, 50, 100, 200] },
                { Stroke.Medley, [100, 200, 400] }
            };
            
            var checkboxItems = new List<CheckboxItem>();
            foreach (var stroke in strokesAndDistances.Keys)
            {
                foreach (var distance in strokesAndDistances[stroke])
                {
                    checkboxItems.Add(new CheckboxItem
                    {
                        Stroke = stroke,
                        Distance = distance,
                        IsChecked = false
                    });
                }
            }

            return checkboxItems;
        }
    }
}